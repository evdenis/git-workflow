#!/usr/bin/env perl

use warnings;
use strict;

use feature qw/say/;

use GnuPG;
use Archive::Extract;
use Git::Repository;
use File::Slurp qw/read_file/;
use FindBin;
use Term::ReadKey;

use lib::abs 'lib';
use Git::WorkFlow::AstraVer::Repo qw/check_changes_exist/;

BEGIN {
   eval {
      require Smart::Comments;
      Smart::Comments->import();
   }
}


die "$0 <ciphered archive>\n"
   unless @ARGV;

my $file = $ARGV[0];
my $dir  = $ENV{CURRENT_PROJECT};

die unless -f $file && -r _;
die unless -d $dir;

my $config_file = "$FindBin::Bin/.config";

my %config;
if (-r $config_file) {
   my @l = read_file($config_file);
   if (@l > 1) {
      die "Wrong format of .config file.\n"
   } else {
      $config{passphrase} = $l[0];
   }
} else {
   ReadMode('noecho');
   print 'Enter your password: ';
   $config{passphrase} = ReadLine(0);
   print "\n";
   ReadMode(0);
}
chomp $config{passphrase};


### GIT CHECKOUT
my $r = Git::Repository->new(work_tree => $dir);

if (check_changes_exist($r)) {
   die "There are changes in repository. You should commit/remove them first.\n";
}

$r->run('checkout' => 'master');

{
   my $output = ($file =~ s/\.(pgp|gpg)$//r);
   die "Wrong file extension" if $file eq $output;
   ### GNUPG DECRYPTING
   GnuPG->new()->decrypt(ciphertext => $file, output => $output, passphrase => $config{passphrase});
   ### ARCHIVE EXTRACTING
   Archive::Extract->new(archive => $output)->extract(to => $dir) or
      die "Can't extract";
   unlink $output;
}

my @time = (localtime)[3,4,5];
my $date = sprintf('%02d.%02d.%d', $time[0], $time[1] + 1, $time[2] - 100);
my $msg = "update: $date";

### ADDING parsec/*
$r->run('add' => 'parsec/*');
### COMMIT MSG: $msg 
$r->run('commit' => '-a' => '-m' => $msg);

