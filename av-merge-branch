#!/usr/bin/env perl

use warnings;
use strict;

use feature qw/say/;

use Git::Repository;
use Getopt::Long;

use lib::abs 'lib';
use Git::WorkFlow::AstraVer::Branch qw/list_branches_sorted check_branch_empty/;


BEGIN {
   eval {
      require Smart::Comments;
      Smart::Comments->import();
   }
}


if ((!@ARGV) || (($ARGV[0] ne 'spec') && ($ARGV[0] ne 'devel'))) {
   die "$0 <devel|spec>\n"
}

my $branch = $ARGV[0]; # branch merge into
my $r = Git::Repository->new(work_tree => $ENV{CURRENT_PROJECT});
my @branches = list_branches_sorted($r, $branch . '-*');
die "Can't find versioned branches $branch\n"
   unless @branches;

my $lbranch;
my $parent_branch = $branch eq 'devel' ?
                        'master' :
                        $branches[-1] =~ s/\Aspec/devel/r, $branches[-1];

unless (check_branch_empty($r, $parent_branch)) {
   $lbranch = $branches[-1]
}

die "Can't determine previous versioned branch of development.\n"
   unless $lbranch;

$r->run(checkout => $branch);

#--no-ff
#--squash
#
