#!/usr/bin/env perl

use warnings;
use strict;

use feature qw/say/;

use Git::Repository;
use Getopt::Long::Descriptive;

use lib::abs 'lib';
use Git::WorkFlow::AstraVer::Branch qw/list_branches_sorted parse_branch_version/;


BEGIN {
   eval {
      require Smart::Comments;
      Smart::Comments->import();
   }
}

my ($conf, $usage) = describe_options(
   "%c %o - create a new branch in repository of specifications",
   ['directory|d=s', 'git repository',  {
         default => $ENV{CURRENT_PROJECT},
         callbacks => {directory => sub { -d shift } }
      }
   ],
   [branch => hidden => { one_of => [
                  ['spec', 'select spec branch' ],
                  ['devel','select devel branch'],
              ], required => 1 }
   ],
   [incr => hidden => { one_of => [
               [major => 'increase major version; only for devel branch'],
               [minor => 'increase minor version; only for devel branch']
            ], default => 'minor' }
   ],
   ['help|h', 'print usage message and exit', {shortcircuit => 1}]
);

print($usage->text), exit if $conf->help;


my $r = Git::Repository->new(work_tree => $conf->directory);

my @devel_branches = list_branches_sorted($r, 'devel-*');
my $latest_devel = $devel_branches[-1];
my $latest_devel_version = parse_branch_version($latest_devel);

if ($conf->branch eq 'devel') {
   ### CHECKOUT master
   $r->run(checkout => 'master');

   if ($conf->incr eq 'major') {
      ++$latest_devel_version->[0];
      $latest_devel_version->[1] = 0;
   } else {
      ++$latest_devel_version->[1]
   }
   my $new_devel = 'devel-' . join('.', @$latest_devel_version);
   ### NEW BRANCH: $new_devel
   ### CHECKOUT: $new_devel
   $r->run(checkout => '-b' => $new_devel);
} elsif ($conf->branch eq 'spec') {
   ### CHECKOUT: $latest_devel
   $r->run(checkout => $latest_devel);

   my $new_spec = 'spec-' . join('.', @$latest_devel_version);
   ### NEW BRANCH: $new_spec
   ### CHECKOUT: $new_spec
   $r->run(checkout => '-b' => $new_spec);
}

